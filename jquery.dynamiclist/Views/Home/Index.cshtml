@model DynamicListExampleModel
@{
    ViewBag.Title = "DynamicList Example";
    ViewBag.Ui = Model.Ui;
}
@section styles
{
    <style type="text/css">
        table {
            border-collapse: collapse;
        }

            table td, table th {
                border: 1px solid #ccc;
            }

            table td {
                padding: .5em;
            }

        .dynamic-list-container {
            display: inline-block;
        }

        .list {
            margin: 0;
            padding: 0;
        }

        ul.list, div.list, .k-widget {
            width: 430px;
        }

            .k-widget li, .k-widget div.item {
                padding: .5em;
            }

        .list li {
            list-style: none;
        }

        .list .item, .list .add-item-container {
            padding-bottom: .5em;
        }

        .list .add-item-container, table .add-item-container {
            text-align: right;
        }

        .ui-kendo .k-input {
            padding: .2em;
        }

        .ui-kendo ul .form-group, .ui-kendo div.item .form-group {
            float: left;
            padding-right: 1em;
        }

        .ui-kendo ul .delete-item, .ui-kendo div.item .delete-item {
            float: left;
        }

        .ui-kendo ul .item .form-group, .ui-kendo div.item .form-group {
            padding-bottom: .5em;
        }

        .ui-kendo ul .item, .ui-kendo .add-item-container {
            clear: both;
        }

        .ui-kendo div.list .add-item-container {
            padding: .5em;
        }

        span.glyphicon {
            padding-right: .3em;
        }
    </style>

    @if (Model.Ui == "bootstrap")
    {
        <style type="text/css">
            input {
                border: none;
            }
        </style>
    }
}

<div class="ui-@(Model.Ui)">
    @if (ViewBag.Success == true)
    {
        <div class="alert alert-success k-block k-success-colored">
            Save successful
        </div>
    }
    @Html.ValidationSummary(true)
    @using (Html.BeginForm())
    {
        @Html.HiddenFor(m => m.Ui)
        <h2>Table Example</h2>
        <table id="tableExample" class="table table-striped">
            <thead>
                <tr class="k-header">
                    <th>
                        ID
                    </th>
                    <th>
                        Name
                    </th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Model.TableItems.Count; i++)
                {
                    @Html.EditorFor(model => model.TableItems[i], "DynamicTableItemModel")
                }
            </tbody>
            <tfoot></tfoot>
        </table>

        <h2>List Example</h2>
        <div class="k-widget">
            <ul id="listExample" class="list k-content">
                @Html.EditorFor(model => model.ListItems)
            </ul>
        </div>

        <h2>Empty List Example</h2>
        <div class="k-widget">
            <ul id="emptyListExample" class="list k-content">
                @Html.EditorFor(model => model.EmptyListItems)
            </ul>
        </div>

        <h2>Div Example</h2>
        <div class="k-widget">
            <div id="divExample" class="list k-content">
                @for (int i = 0; i < Model.DivItems.Count; i++)
                {
                    @Html.EditorFor(model => model.DivItems[i], "DynamicDivItemModel")
                }
            </div>
        </div>

        <p>
            <button type="submit" class="btn btn-primary k-button">Save</button>
        </p>
    }
</div>

@section scripts
{
    <script src="~/Scripts/Package/jquery.validate.unobtrusive.dynamic.js" type="text/javascript"> </script>
    <script src="~/Scripts/Package/jquery.dynamiclist.js" type="text/javascript"> </script>
    <script src="~/Scripts/Package/jquery.dynamiclist.templates.@(Model.Ui).js" type="text/javascript"> </script>
    <script type="text/javascript">
        <!--
        $(document).ready(function()
        {
            if ($.fn.dynamiclist.defaults.uiType === "bootstrap")
            {
                // custom templates for bootstrap
                $.fn.dynamiclist.defaults.templates = {
                    table: {
                        container: "<div class='dynamic-list-container'><\/div>",
                        addItem: "<div class=\"add-item-container\"><button class=\"add-item btn btn-default\"><span class='glyphicon glyphicon-plus'><\/span>{addLabel}<\/button><\/div>",
                        removeItem: "<button type=\"button\" class=\"delete-item btn btn-danger\"><span class=\"glyphicon glyphicon-remove\"><\/span>{removeLabel}</button>"
                    },
                    list: {
                        container: "<div class='dynamic-list-container'><\/div>",
                        addItem: "<li class=\"add-item-container row\"><div class='col-md-12'><button class=\"add-item btn btn-default\"><span class='glyphicon glyphicon-plus'><\/span>{addLabel}<\/button><\/div><\/li>",
                        removeItem: "<div class='col-md-4 text-right'><button type=\"button\" class=\"delete-item btn btn-danger\"><span class=\"glyphicon glyphicon-remove\"><\/span>{removeLabel}</button><\/div>"
                    },
                    div: {
                        container: "<div class='dynamic-list-container'><\/div>",
                        addItem: "<div class=\"add-item-container row\"><div class='col-md-12'><button class=\"add-item btn btn-default\"><span class='glyphicon glyphicon-plus'><\/span>{addLabel}<\/button><\/div><\/div>",
                        removeItem: "<div class='col-md-4 text-right'><button type=\"button\" class=\"delete-item btn btn-danger\"><span class=\"glyphicon glyphicon-remove\"><\/span>{removeLabel}</button><\/div>"
                    }
                };
            }

            $("#tableExample").dynamiclist(
                {
                    itemSelector: "tbody tr.item", // Selector for each item in the list
                    addLabel: "Add", // Label for the add button
                    removeLabel: "Remove", // Label for the remove button
                    htmlFieldPrefix: "@ViewData.TemplateInfo.HtmlFieldPrefix", // ASP.NET MVC html field prefix
                    property: "@Html.NameFor(m => m.TableItems)", // Model property that contains this list. Each item input is assumed to have a name of HtmlFieldPrefix.Property[index].BindingProperty
                    newItemUrl: '@Url.Action("NewTableItem")', // Action url for the new item partial view. It should accept a htmlFieldPrefix parameter. E.g. Controller/Action?htmlFieldPrefix=Model.Property
                    listType: "table", // list or table
                    itemAdded: function(item)
                    {
                        // Occurs after an item is added to the list
                        // add the alt row class
                        $("#tableExample tbody tr:odd").addClass("k-alt");
                    },
                    itemRemoved: function(item)
                    {
                        // Occurs after an item is removed from the list
                        $("#tableExample").after(" Item " + $("td input:first", item).val() + " removed.");
                    }
                });
            $("#listExample").dynamiclist(
                {
                    itemSelector: "li.item", // Selector for each item in the list
                    addLabel: "Add", // Label for the add button
                    removeLabel: "Remove", // Label for the remove button
                    htmlFieldPrefix: "@ViewData.TemplateInfo.HtmlFieldPrefix", // ASP.NET MVC html field prefix
                    property: "@Html.NameFor(m => m.ListItems)", // Model property that contains this list. Each item input is assumed to have a name of HtmlFieldPrefix.Property[index].BindingProperty
                    newItemUrl: '@Url.Action("NewListItem")', // Action url for the new item partial view. It should accept a htmlFieldPrefix parameter. E.g. Controller/Action?htmlFieldPrefix=Model.Property
                    listType: "list", // list or table
                    itemAdded: function(item)
                    {
                        // Occurs after an item is added to the list
                    },
                    itemRemoved: function(item)
                    {
                        // Occurs after an item is removed from the list
                        $("#listExample").after(" Item " + $("input:first", item).val() + " removed.");
                    }
                });

            $("#emptyListExample").dynamiclist(
                {
                    itemSelector: "li.item", // Selector for each item in the list
                    addLabel: "Add", // Label for the add button
                    removeLabel: "Remove", // Label for the remove button
                    htmlFieldPrefix: "@ViewData.TemplateInfo.HtmlFieldPrefix", // ASP.NET MVC html field prefix
                    property: "@Html.NameFor(m => m.EmptyListItems)", // Model property that contains this list. Each item input is assumed to have a name of HtmlFieldPrefix.Property[index].BindingProperty
                    newItemUrl: '@Url.Action("NewListItem")', // Action url for the new item partial view. It should accept a htmlFieldPrefix parameter. E.g. Controller/Action?htmlFieldPrefix=Model.Property
                    listType: "list", // list or table
                    itemAdded: function(item)
                    {
                        // Occurs after an item is added to the list
                    },
                    itemRemoved: function(item)
                    {
                        // Occurs after an item is removed from the list
                        $("#emptyListExample").after(" Item " + $("input:first", item).val() + " removed.");
                    }
                });

            $("#divExample").dynamiclist(
                {
                    itemSelector: "div.item", // Selector for each item in the list
                    addLabel: "Add", // Label for the add button
                    removeLabel: "Remove", // Label for the remove button
                    htmlFieldPrefix: "@ViewData.TemplateInfo.HtmlFieldPrefix", // ASP.NET MVC html field prefix
                    property: "@Html.NameFor(m => m.DivItems)", // Model property that contains this list. Each item input is assumed to have a name of HtmlFieldPrefix.Property[index].BindingProperty
                    newItemUrl: '@Url.Action("NewDivItem")', // Action url for the new item partial view. It should accept a htmlFieldPrefix parameter. E.g. Controller/Action?htmlFieldPrefix=Model.Property
                    listType: "div", // list or table
                    itemAdded: function (item)
                    {
                        // Occurs after an item is added to the list
                    },
                    itemRemoved: function (item)
                    {
                        // Occurs after an item is removed from the list
                        $("#divExample").after(" Item " + $("input:first", item).val() + " removed.");
                    }
                });
        });
        // -->
    </script>
}