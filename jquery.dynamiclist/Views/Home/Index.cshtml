@model DynamicListExampleModel
@{
    ViewBag.Title = "DynamicList Example";
    ViewBag.Ui = Model.Ui;
}

<div class="ui-@(Model.Ui)">

    <div class="form-inline">
        <label for="uiSelect">Select a UI framework:</label>
        <select id="uiSelect" class="k-select form-control">
            <option value="bootstrap">bootstrap</option>
            <option value="kendo">Kendo UI</option>
        </select>
    </div>

    @if (ViewBag.Success == true)
    {
        <div class="alert alert-success k-block k-success-colored">
            Save successful
        </div>
    }
    @Html.ValidationSummary(true)
    @using (Html.BeginForm())
    {
        @Html.HiddenFor(m => m.Ui)
        <h2>Table Example</h2>
        <table id="tableExample" class="table table-striped table-bordered">
            <thead>
                <tr class="k-header">
                    <th>
                        ID
                    </th>
                    <th>
                        Name
                    </th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Model.TableItems.Count; i++)
                {
                    @Html.EditorFor(model => model.TableItems[i], "DynamicTableItemModel")
                }
            </tbody>
            <tfoot></tfoot>
        </table>

        <h2>List Example</h2>
        <div class="k-widget">
            <ul id="listExample" class="list k-content">
                @Html.EditorFor(model => model.ListItems)
            </ul>
        </div>

        <h2>Empty List Example</h2>
        <div class="k-widget">
            <ul id="emptyListExample" class="list k-content">
                @Html.EditorFor(model => model.EmptyListItems)
            </ul>
        </div>

        <h2>Div Example</h2>
        <div class="k-widget">
            <div class="row">
                <div class="api-buttons form-group col-md-12">
                    <label>API:</label>
                    <button id="addItem">Add</button>
                    <button id="removeFirstItem">Remove First</button>
                </div>
            </div>
            <div id="divExample" class="list k-content">
                @for (int i = 0; i < Model.DivItems.Count; i++)
                {
                    @Html.EditorFor(model => model.DivItems[i], "DynamicDivItemModel")
                }
            </div>
        </div>

        <p>
            <button type="submit" class="btn btn-primary k-button k-button-icontext">
                <span class="glyphicon glyphicon-check k-icon k-i-tick"></span>
                Save
            </button>
        </p>
    }
</div>

@section scripts
{
    <script src="~/Scripts/Package/jquery.validate.unobtrusive.dynamic.js" type="text/javascript"> </script>
    <script src="~/Scripts/Package/jquery.dynamiclist.js" type="text/javascript"> </script>
    <script src="~/Scripts/Package/jquery.dynamiclist.templates.@(Model.Ui).js" type="text/javascript"> </script>
    <script type="text/javascript">
        <!--
        $(document).ready(function()
        {
            $("#uiSelect").val("@Model.Ui");

            $("#uiSelect").change(function ()
            {
                window.location = "?ui=" + $(this).val();
            });
        });
        //-->
    </script>
    <script type="text/javascript">
        <!--
        $(document).ready(function()
        {
            if ("@Model.Ui" === "bootstrap")
            {
                // custom templates for bootstrap
                $.fn.dynamiclist.defaults.templates = {
                    table: {
                        container: "<div class='dynamic-list-container'><\/div>",
                        addItem: "<div class=\"add-item-container\"><button class=\"add-item btn btn-default\"><span class='glyphicon glyphicon-plus'><\/span>{addLabel}<\/button><\/div>",
                        removeItem: "<button type=\"button\" class=\"delete-item btn btn-danger\"><span class=\"glyphicon glyphicon-remove\"><\/span>{removeLabel}</button>"
                    },
                    list: {
                        container: "<div class='dynamic-list-container'><\/div>",
                        addItem: "<li class=\"add-item-container row\"><div class='col-md-12'><button class=\"add-item btn btn-default\"><span class='glyphicon glyphicon-plus'><\/span>{addLabel}<\/button><\/div><\/li>",
                        removeItem: "<div class='col-md-4 text-right'><button type=\"button\" class=\"delete-item btn btn-danger\"><span class=\"glyphicon glyphicon-remove\"><\/span>{removeLabel}</button><\/div>"
                    },
                    div: {
                        container: "<div class='dynamic-list-container'><\/div>",
                        addItem: "<div class=\"add-item-container row\"><div class='col-md-12'><button class=\"add-item btn btn-default\"><span class='glyphicon glyphicon-plus'><\/span>{addLabel}<\/button><\/div><\/div>",
                        removeItem: "<div class='col-md-4 text-right'><button type=\"button\" class=\"delete-item btn btn-danger\"><span class=\"glyphicon glyphicon-remove\"><\/span>{removeLabel}</button><\/div>"
                    }
                };
            }

            $("#tableExample").dynamiclist(
                {
                    itemSelector: "tbody tr.item",
                    addLabel: "Add",
                    removeLabel: "Remove",
                    htmlFieldPrefix: "@ViewData.TemplateInfo.HtmlFieldPrefix",
                    property: "@Html.NameFor(m => m.TableItems)",
                    newItemUrl: '@Url.Action("NewTableItem")',
                    listType: "table",
                    itemAdded: function(item)
                    {
                        $("#tableExample tbody tr:odd").addClass("k-alt");
                    },
                    itemRemoved: function(item)
                    {
                        $("#tableExample").after(" Item " + $("td input:first", item).val() + " removed.");
                    }
                });

            $("#listExample").dynamiclist(
                {
                    itemSelector: "li.item",
                    addLabel: "Add",
                    removeLabel: "Remove",
                    htmlFieldPrefix: "@ViewData.TemplateInfo.HtmlFieldPrefix",
                    property: "@Html.NameFor(m => m.ListItems)",
                    newItemUrl: '@Url.Action("NewListItem")',
                    listType: "list",
                    itemAdded: function(item)
                    {
                        console.log("#listExample item added");
                    },
                    itemRemoved: function(item)
                    {
                        $("#listExample").after(" Item " + $("input:first", item).val() + " removed.");
                    }
                });

            $("#emptyListExample").dynamiclist(
                {
                    itemSelector: "li.item",
                    addLabel: "Add",
                    removeLabel: "Remove",
                    htmlFieldPrefix: "@ViewData.TemplateInfo.HtmlFieldPrefix",
                    property: "@Html.NameFor(m => m.EmptyListItems)",
                    newItemUrl: '@Url.Action("NewListItem")',
                    listType: "list",
                    itemAdded: function(item)
                    {
                    },
                    itemRemoved: function(item)
                    {
                        $("#emptyListExample").after(" Item " + $("input:first", item).val() + " removed.");
                    }
                });

            $("#divExample").dynamiclist(
                {
                    // Selector for each item in the list
                    itemSelector: "div.item",
                    // Label for the add button
                    addLabel: "Add",
                    // Label for the remove button
                    removeLabel: "Remove",
                    // ASP.NET MVC html field prefix
                    htmlFieldPrefix: "@ViewData.TemplateInfo.HtmlFieldPrefix",
                    // Model property that contains this list. Each item input is assumed to have a name of HtmlFieldPrefix.Property[index].BindingProperty
                    property: "@Html.NameFor(m => m.DivItems)",
                    // Action url for the new item partial view. It should accept a htmlFieldPrefix parameter. E.g. Controller/Action?htmlFieldPrefix=Model.Property
                    newItemUrl: function ()
                    {
                        return '@Url.Action("NewDivItem")';
                    },
                    // list, div or table
                    listType: "div",
                    // Triggered after an item is added to the list
                    itemAdded: function (item)
                    {
                    },
                    removeConfirmation: "Are you sure you want to remove this item?",
                    // Triggered after an item is removed from the list
                    itemRemoved: function (item)
                    {
                        $("#divExample").after(" Item " + $("input:first", item).val() + " removed.");
                    }
                });

            // API
            $("#addItem").click(function(e)
            {
                e.preventDefault();
                $("#divExample").dynamiclist("add");
            });

            $("#removeFirstItem").click(function (e)
            {
                e.preventDefault();
                var $firstItem = $("#divExample .item:first");
                $("#divExample").dynamiclist("remove", $firstItem);
            });
        });
        // -->
    </script>
}