@model DynamicListExampleModel
@{
    ViewBag.Title = "DynamicList Example";
}
@section styles
{
    <style type="text/css">
        table { border-collapse: collapse; }

        table td, table th { border: 1px solid #ccc; }

        .dynamic-list-container { display: inline-block; }

        .list {
            margin: 0;
            padding: 0;
        }

        .list li { list-style: none; }
    </style>
}
@if (ViewBag.Success == true)
{
    <div class="ui-state-highlight">
        Save successful</div>
}
@Html.ValidationSummary(true)
<h2>
    Table Example</h2>
@using (Html.BeginForm())
{
    <table id="tableExample">
        <thead>
            <tr>
                <th>
                    ID
                </th>
                <th>
                    Name
                </th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.TableItems.Count; i++)
            {
                @Html.EditorFor(model => model.TableItems[i], "DynamicTableItemModel")
            }
        </tbody>
        <tfoot>
            <tr>
                <th>
                    ID
                </th>
                <th>
                    Name
                </th>
            </tr>
        </tfoot>
    </table>
    <h2>
        List Example</h2>
    <ul id="listExample" class="list">
        @for (int i = 0; i < Model.ListItems.Count; i++)
        {
            @Html.EditorFor(model => model.ListItems[i], "DynamicListItemModel")
        }
    </ul>
    <h2>
        Empty List Example</h2>
    <ul id="emptyListExample" class="list">
    </ul>
    <p>
        <input type="submit" value="Save" />
    </p>
}
@section scripts
{
    <script src="~/Scripts/jquery.validate.unobtrusive.dynamic.js" type="text/javascript"> </script>
    <script src="~/Scripts/jquery.dynamiclist.js" type="text/javascript"> </script>
    <script type="text/javascript">
    <!--
        $(document).ready(function() {
            $("#tableExample").dynamiclist(
                {
                    itemSelector: "tbody tr.item", // Selector for each item in the list
                    addLabel: "Additional", // Label for the add button
                    removeLabel: "Remove", // Label for the remove button
                    htmlFieldPrefix: "@ViewData.TemplateInfo.HtmlFieldPrefix", // ASP.NET MVC html field prefix
                    property: "TableItems", // Model property that contains this list. Each item input is assumed to have a name of HtmlFieldPrefix.Property[index].BindingProperty
                    newItemUrl: '@Url.Action("NewTableItem")', // Action url for the new item partial view. It should accept a htmlFieldPrefix parameter. E.g. Controller/Action?htmlFieldPrefix=Model.Property
                    listType: "table", // list or table
                    itemAdded: function(item)
                    {
                        // Occurs after an item is added to the list
                    },
                    itemRemoved: function(item)
                    {
                        // Occurs after an item is removed from the list
                        $("#tableExample").after(" Item " + $("td input:first", item).val() + " removed.");
                    }
                });
            $("#listExample").dynamiclist(
                {
                    itemSelector: "li.item", // Selector for each item in the list
                    addLabel: "Additional", // Label for the add button
                    removeLabel: "Remove", // Label for the remove button
                    htmlFieldPrefix: "@ViewData.TemplateInfo.HtmlFieldPrefix", // ASP.NET MVC html field prefix
                    property: "ListItems", // Model property that contains this list. Each item input is assumed to have a name of HtmlFieldPrefix.Property[index].BindingProperty
                    newItemUrl: '@Url.Action("NewListItem")', // Action url for the new item partial view. It should accept a htmlFieldPrefix parameter. E.g. Controller/Action?htmlFieldPrefix=Model.Property
                    listType: "list", // list or table
                    itemAdded: function(item)
                    {
                        // Occurs after an item is added to the list
                    },
                    itemRemoved: function(item)
                    {
                        // Occurs after an item is removed from the list
                        $("#listExample").after(" Item " + $("input:first", item).val() + " removed.");
                    }
                });

            $("#emptyListExample").dynamiclist(
                {
                    itemSelector: "li.item", // Selector for each item in the list
                    addLabel: "Additional", // Label for the add button
                    removeLabel: "Remove", // Label for the remove button
                    htmlFieldPrefix: "@ViewData.TemplateInfo.HtmlFieldPrefix", // ASP.NET MVC html field prefix
                    property: "ListItems", // Model property that contains this list. Each item input is assumed to have a name of HtmlFieldPrefix.Property[index].BindingProperty
                    newItemUrl: '@Url.Action("NewListItem")', // Action url for the new item partial view. It should accept a htmlFieldPrefix parameter. E.g. Controller/Action?htmlFieldPrefix=Model.Property
                    listType: "list", // list or table
                    itemAdded: function(item)
                    {
                        // Occurs after an item is added to the list
                    },
                    itemRemoved: function(item)
                    {
                        // Occurs after an item is removed from the list
                        $("#emptyListExample").after(" Item " + $("input:first", item).val() + " removed.");
                    }
                });
        });
    // -->
</script>
}